<?php

class_load ('MonitorItemAbstraction');

/**
* Class for representing AD printers.
* 
* Besides the standard AD information collected from KAWACS agent, there are
* other information as well stored about AD Printers:
* - warranties information, stored in ad_printers_warranties
* - asset numbers and SNMP settings, stored in ad_printers_extras
*
* The AD printers are uniquely identified by their canonical name and, alternatively,
* by the reported computer item (by computer_id and nrc) which contained the printer.
* Initially this was acceptable, since there were not many operations performed on 
* AD printers.
*
* But since this changed over time and the amount of code working with AD printers
* was increasing, a easier way of referencing them was required, so a mechanism of
* generating unique numeric IDs was introduced. These IDs, together with asset numbers
* and other information (e.g. SNMP settings) are stored in the TBL_AD_PRINTERS_EXTRAS
* table.
*
* The asset numbers are automatically generated whenever an AD_Printer object
* is instantiated for which no asset number was generated before. The asset
* numbers (both in their string and number-only form) can serve as unique
* identifiers for AD Printers, instead of using the more lengthy Canonical Name.
*
* Alternatively, the sync_extras() method will be regularily run from
* crontab (via notifications.php) and will also update the ad_printers_extras
* and ad_printers_warranties tables for the AD Printers which are not present
* in there already.
*
* For SNMP monitoring, the system works similar with SNMP monitoring for peripherals.
* In order to enable SNMP monitoring, you need to define the needed monitor profiles,
* assign a profile to the printer and specify which computer will collect the 
* SNMP data. Since there are no "Peripheral Classes" for AD Printers, there is no
* need to associate profiles with such classes.
*
* The collected SNMP information about AD Printers is stored in TBL_PERIPHERALS_ITEMS.
* 
* IMPORTANT NOTE: Checking for alerts related to AD Printers is done in the Peripheral
* class, since the SNMP data for both peripherals and AD Printers is stored in TBL_PERIPHERALS_ITEMS
*
*/

class AD_Printer extends MonitorItemAbstraction
{
	/** The ID of the monitoring item storing AD Printers info
	* @var int */
	var $item_id = ADPRINTERS_ITEM_ID;
	
	/** The ID of the computer which reported this AD printer */
	var $computer_id = null;
	
	/** The index number of this AD printer in the reported AD printers list by the computer 
	* @var int */
	var $nrc = 0;

	/** The ID of the customer
	* @var int */
	var $customer_id = null;
	
	/** The serial number of the printer - from the warranty information
	* @var string */
	var $sn = 0;
	
	/** The date when the warranty starts - from the warranty information
	* @var time */
	var $warranty_starts = 0;
	
	/** The date when the warranty ends - from the warranty information
	* @var time */
	var $warranty_ends = 0;
	
	/** The product number - from the warranty information 
	* @var string */
	var $product_number = '';
	
	
	/** The asset number for this AD printer. It is automatically generated by the system
	* if one doesn't exist already
	* @var string
	*/
	var $asset_no = '';
	
	/** The unique numeric ID for this AD printer, which is also part of the asset number
	* @var int */
	var $id = null;
	
	/** The ID of the monitoring profile to use for this printer, if SNMP data gathering is enabled for it
	* @var int */
	var $profile_id = 0;
	
	/** True or False if SNMP data collection is enabled for this printer
	* @var bool */
	var $snmp_enabled = 0;
	
	/** The ID of the computer which will collect the SNMP data, if any
	* @var int */
	var $snmp_computer_id = 0;
	
	/** The IP address from which the assigned computer will be able to collect the SNMP data
	* @var string */
	var $snmp_ip = '';
	
	
	/** Associative array with the SNMP collected data, the keys being item IDs and
	* the values being AD_SNMP_Item objects.
	* @var array */
	var $values_snmp = array ();
	
	
	/** The Location object associated with this AD Printer, if any. Note that this is only
	* loaded on request with load_location()
	* @var Location */
	var $customer_location = null;
	
	
	/** The fields to load or save from the database, containing the "extra" info for AD Printers 
	* @var array */
	var $extra_fields = array ('id', /*'customer_id', 'date_created',*/ 'profile_id', 'snmp_enabled', 'snmp_computer_id', 'snmp_ip', 'last_contact'/*, 'location_id'*/);
	
	
	/** Constructor, also loads the object data if the computer ID and $nrc are passed */
	function AD_Printer ($computer_id = null, $nrc = 0)
	{
		if ($computer_id)
		{
			$this->computer_id = $computer_id;
			$this->nrc = $nrc;
			$this->load_data ();
		}
	}
	
	/** Returns an AD_Printer object by specifying it's ID (as the one used in asset numbers) */
	function get_by_id ($id)
	{
		$ret = null;
		if (is_numeric($id))
		{
			$q = 'SELECT computer_id, nrc, value FROM '.TBL_COMPUTERS_ITEMS.' ci INNER JOIN '.TBL_AD_PRINTERS_EXTRAS.' a ';
			$q.= 'ON a.id='.$id.' AND ci.item_id='.ADPRINTERS_ITEM_ID.' AND ci.field_id='.FIELD_ID_AD_PRINTER_CANONICAL_NAME.' ';
			$q.= 'AND ci.value=a.canonical_name ';
			$d = db::db_fetch_array ($q);
			if (count($d) == 1) $ret = new AD_Printer ($d[0]->computer_id, $d[0]->nrc);
			else
			{
				// Since no matching information has been found in computer items,
				// this must be an orphan AD Printer. Therefore build its info only
				// with what's available in ad_printers_extras and ad_printers_warranties
				$q = 'SELECT id, canonical_name, asset_number FROM '.TBL_AD_PRINTERS_EXTRAS.' WHERE id='.$id;
				$d = db::db_fetch_array ($q);
				if (count($d) == 1)
				{
					$d = $d[0];
					$ret = new AD_Printer ();
					$ret->id = $d->id;
					$ret->canonical_name = $d->canonical_name;
					$ret->load_data ();
				}
			}
		}
		return $ret;
	}
	
	
	/** Loads AD Printer data, as well as warranty information */
	function load_data ()
	{
		parent::load_data ();
		$this->load_warranty_information ();
		$this->asset_no = $this->get_asset_no ();
		$this->asset_number = $this->asset_no; // Both field names have been used, this just makes life easier
		
		// Load the extra information about the printer
		if ($this->asset_no)
		{
			$q = 'SELECT '.implode($this->extra_fields, ',').' FROM '.TBL_AD_PRINTERS_EXTRAS.' WHERE asset_number="'.$this->asset_no.'" LIMIT 1';
			$data = db::db_fetch_row ($q);
			foreach ($this->extra_fields as $field) $this->$field = $data[$field];
		}
		
		// If the printer is SNMP enabled, load the SNMP values as well
		if ($this->snmp_enabled) $this->load_snmp_vals ();
		
		// If the printer doesn't specify the name, deduct it from the canonical name
		if (!$this->name) $this->name = preg_replace ('/^.*(\/|\\\)/', '', $this->canonical_name);
	}
	
	/** If there are any SNMP fields, load the detailed SNMP values (including multi-fields) */
	function load_snmp_vals ()
	{
		$this->values_snmp = array ();
		if ($this->snmp_enabled and $this->id and $this->profile_id)
		{
			class_load ('AD_SNMP_Item');
			$q = 'SELECT DISTINCT item_id FROM '.TBL_MONITOR_PROFILES_ITEMS_PERIPH.' WHERE profile_id='.$this->profile_id.' ORDER BY item_id';
			$items_ids = db::db_fetch_vector ($q);
			
			foreach ($items_ids as $item_id) $this->values_snmp[$item_id] = new AD_SNMP_Item ($this->id, $item_id);
		}
	}
	
	
	/** Loads the "extra" infos from an associative array into the object */
	function load_from_array ($data = array ())
	{
		if ($this->asset_no)
		{
			$this->fields = $this->extra_fields; 
			parent::load_from_array($data);
			unset ($this->fields);
		}
	}
	
	/** Checks if the "extra" infos for the peripheral are valid */
	function is_valid_data ()
	{
		$ret = true;
		
		// If SNMP is enabled, make sure all required fields for this are set
		if ($this->snmp_enabled)
		{
			if (!$this->profile_id) {error_msg('Please specify the monitoring profile.'); $ret = false;}
			if (!$this->snmp_computer_id) {error_msg('Please specify the computer which will collect SNMP data.'); $ret = false;}
			if (!$this->snmp_ip) {error_msg('Please specify the peripheral IP address from which SNMP data is collected.'); $ret = false;}
			elseif (!preg_match('/^([0-9]{1,3}\.){3}[0-9]{1,3}$/', $this->snmp_ip))
			{
				error_msg ('Please enter a valid IP address.'); $ret = false;
			}
		}
		
		return $ret;
	}
	
	/** Saves the "extra" infos for the peripheral. Note that it does NOT save the data collected by the Agent */
	function save_data ()
	{
		if ($this->asset_no)
		{
			$q = 'UPDATE '.TBL_AD_PRINTERS_EXTRAS.' SET ';
			foreach ($this->extra_fields as $field)
			{
				if (is_numeric($this->$field)) $q.= $field.'='.$this->$field.',';
				elseif (is_bool($this->$field)) $q.= $field.'='.($this->$field ? 1 : 0).',';
				else $q.= $field.'="'.db::db_escape($this->$field).'",';
			}
			$q = preg_replace ('/\,\s*$/', '', $q).' WHERE asset_number="'.$this->asset_no.'"';
			db::db_query ($q);
		}
	}
	
	
	/** Loads the warranty information */
	function load_warranty_information ()
	{
		if ($this->canonical_name)
		{
			$q = 'SELECT * FROM '.TBL_AD_PRINTERS_WARRANTIES.' WHERE ';
			$q.= 'canonical_name="'.db::db_escape ($this->canonical_name).'" ';
			$data = db::db_fetch_row ($q);
			
			$warranty_fields = array ('sn', 'warranty_starts', 'warranty_ends', 'service_package_id', 'service_level_id', 'contract_number', 'hw_product_id', 'product_number');
			foreach ($warranty_fields as $field) $this->$field = $data[$field];
		}
	}
	
	
	/** Load the associated location, if any */
	function load_location ()
	{
		class_load ('Location');
		$this->location = null;
		if ($this->location_id)
		{
			$this->customer_location = new Location ($this->location_id);
			$this->customer_location->load_parents ();
		}
	}
	
	
	/** Returns the asset number for this printer. Since AD printers don't have unique IDs, their asset
	* numbers are randomly generated and associated with the canonical name of the printers. If an asset
	* number was not generated already, one will be generated upon calling this function */
	function get_asset_no ()
	{
		return get_asset_no_ad_printer($this->canonical_name);
	}
	
	/** 
	* Sets the AD Printer's warranty information, either from an array or from an object
	* @param	mixed	$data			And associative array or an object with warranty 
	*						information. In either case, it must contain the
	*						fields: canonical_name, customer_id, sn, warranty_starts, warranty_ends
	*/
	function set_warranty_data ($data)
	{
		$fields = array ('canonical_name', 'customer_id', 'sn', 'warranty_starts', 'warranty_ends', 'service_package_id', 'service_level_id', 'contract_number', 'hw_product_id', 'product_number');
		
		if (is_array($data) and ($data['canonical_name'] or $this->canonical_name))
		{
			foreach ($fields as $field) 
			{
				if (isset($data[$field])) $this->$field = $data[$field];
			}
		}
		elseif (is_object($data) and ($data->canonical_name or $this->canonical_name))
		{
			foreach ($fields as $field) 
			{
				if (isset($data->$field)) $this->$field = $data->$field;
			}
		}
	}
	
	
	/** Saves the warranty information */
	function save_warranty ()
	{
		if ($this->canonical_name)
		{
			if (!$this->warranty_starts) $this->warranty_starts = 0;
			if (!$this->warranty_ends) $this->warranty_ends = 0;
			if (!$this->service_package_id) !$this->service_package_id = 0;
			if (!$this->service_level_id) $this->service_level_id = 0;
			
		
			$q = 'REPLACE INTO '.TBL_AD_PRINTERS_WARRANTIES.' ';
			$q.= '(canonical_name, customer_id, sn, warranty_starts, warranty_ends, service_package_id, service_level_id, contract_number, hw_product_id, product_number)'; $q.= ' VALUES ';
			$q.= '("'.db::db_escape($this->canonical_name).'", '.$this->customer_id.', ';
			$q.= '"'.db::db_escape($this->sn).'", '.$this->warranty_starts.', '.$this->warranty_ends.', ';
			$q.= $this->service_package_id.','.$this->service_level_id.',';
			$q.= '"'.db::db_escape($this->contract_number).'", "'.db::db_escape($this->hw_product_id).'", ';
			$q.= '"'.db::db_escape($this->product_number).'") ';
			
			db::db_query ($q);
		}
	}
	
	
	/** Returns the Customer Location to which this AD Printer belongs to, or NULL if there is no location */
	function get_location ()
	{
		$ret = null;
		if ($this->location_id)
		{
			class_load ('Location');
			$ret = new Location ($this->location_id);
		}
		return $ret;
	}
	
	
	/** Sets the location to which this AD Printer belongs to */
	function set_location ($location_id)
	{
		if ($this->id)
		{
			db::db_query ('UPDATE '.TBL_AD_PRINTERS_EXTRAS.' set location_id='.intval($location_id).' WHERE id='.$this->id);
		}
	}
	
	/** Sets the date since when the AD Printer should be considered as being managed in Keyos */
	function set_date_created ($date_created)
	{
		if ($this->id)
		{
			db::db_query ('UPDATE '.TBL_AD_PRINTERS_EXTRAS.' set date_created='.intval($date_created).' WHERE id='.$this->id);
		}
	}
	
	
	/** [Class Method] Returns an associative array of AD printers 
	* @param	array				$filter		Associative array with filtering criteria. Can contain:
	*								- customer_id: Return only AD Printers for this customer
	* @param	bool				$by_id		Specifies what will the array keys contain in the results array.
	*								If False (default), the keys will be strings composed of the
	*								computer_id, item_id and nrc (concatenated with '_').
	*								If True, the keys will be the unique numeric IDs of the AD printers
	* @return	array						Associative array, the keys being the identification (in the form
	*								specified by $by_id) and the values being the AD Printers names.
	*/
	public static function get_ad_printers_list ($filter = array(), $by_id = false)
	{
		if (!$by_id) return parent::get_list (FIELD_ID_AD_PRINTER_NAME, $filter);
		else
		{
			$q = 'SELECT e.id, ci2.value FROM '.TBL_COMPUTERS.' c INNER JOIN '.TBL_COMPUTERS_ITEMS.' ci ';
			$q.= 'ON c.id=ci.computer_id AND ci.item_id='.ADPRINTERS_ITEM_ID.' AND ci.field_id='.FIELD_ID_AD_PRINTER_CANONICAL_NAME.' ';
			if ($filter['customer_id']) $q.= ' AND c.customer_id='.$filter['customer_id'].' ';
			$q.= 'INNER JOIN '.TBL_AD_PRINTERS_EXTRAS.' e ON ci.value=e.canonical_name ';
			$q.= 'INNER JOIN '.TBL_COMPUTERS_ITEMS.' ci2 ON ci.computer_id=ci2.computer_id AND ci2.item_id='.ADPRINTERS_ITEM_ID.' ';
			$q.= 'AND ci.nrc=ci2.nrc AND ci2.field_id='.FIELD_ID_AD_PRINTER_NAME.' ';
			$q.= 'ORDER BY ci2.value ';
			return db::db_fetch_list ($q);
			
		}
	}
	
	/** [Class Method] Returns all AD Printers using a given profile
	* @return	array					Associative array, the keys being the numeric IDs and the values 
	*							being the short canonical names of the printers
	*/
	public static function get_ad_printers_list_profile ($profile_id)
	{
		$ret = array ();
		if ($profile_id)
		{
			$q = 'SELECT e.id, e.canonical_name FROM '.TBL_AD_PRINTERS_EXTRAS.' e ';
			$q.= 'INNER JOIN '.TBL_AD_PRINTERS_WARRANTIES.' w ON e.canonical_name=w.canonical_name ';
			$q.= 'INNER JOIN '.TBL_CUSTOMERS.' c ON w.customer_id=c.id ';
			$q.= 'WHERE profile_id='.$profile_id.' ORDER BY c.name, e.canonical_name ';
			
			$ret = db::db_fetch_list ($q);
			foreach ($ret as $id => $name) $ret[$id] = preg_replace ('/^.*\//', '', $name);
		}
		return $ret;
	}
	
	/** [Class Method] Returns the associations between numeric AD Printers numeric IDs and their customer IDs
	* @param	int			$customer_id	(Optional) If specified, return the IDs of AD Printers for this customer
	* @return	array					Associative array, they keys being the AD Printers numeric IDs and the 
	*							values being the corrsponding customers IDs
	*/
	public static function get_ad_printers_customer_ids ($customer_id = null)
	{
		$ret = array ();
		
		$q = 'SELECT e.id, w.customer_id FROM '.TBL_AD_PRINTERS_EXTRAS.' e ';
		$q.= 'INNER JOIN '.TBL_AD_PRINTERS_WARRANTIES.' w ON e.canonical_name=w.canonical_name ';
		$q.= 'INNER JOIN '.TBL_CUSTOMERS.' c ON w.customer_id=c.id ';
		if ($customer_id) $q.= 'WHERE w.customer_id='.$customer_id.' ';
		$q.= 'ORDER BY c.name, e.canonical_name ';
		
		$ret = db::db_fetch_list ($q);
		foreach ($ret as $id => $name) $ret[$id] = preg_replace('/^.*\//', '', $name);
		
		return $ret;
	}
	
	/** [Class Method] Returns and array of AD_Printer objects according to the specified criteria */
	public static function get_ad_printers ($filter = array())
	{
		$ret = array ();
		
		$ids = parent::get_list (FIELD_ID_AD_PRINTER_NAME, $filter);
		
		foreach ($ids as $key => $val)
		{
			list ($computer_id, $item_id, $nrc) = preg_split('/_/', $key);
			$ret[] = new AD_Printer ($computer_id, $nrc);
		}
		
		if ($filter['order_by'] == 'asset_no') usort ($ret, array('AD_Printer', 'cmp_asset_no'));
		
		return $ret;
	}
	
	public static function get_ad_printers_by_condition($filter)
	{
		$ret=array();
		$items = array();
        $query = "";
		$ad_prt_driver_name_field = 94;

        if($filter['search'])
		{
			//we search by the driver name
			if($filter['customer_id'])
			{
				$query = "SELECT distinct ci.computer_id, nrc from ".TBL_COMPUTERS_ITEMS." ci inner join ".TBL_COMPUTERS." c on ci.computer_id = c.id where c.customer_id = ".$filter['customer_id']." and ci.field_id = ".$ad_prt_driver_name_field." ";
			}
			else 
			{
				$query = "SELECT distinct ci.computer_id, ci.nrc, c.customer_id from ".TBL_COMPUTERS_ITEMS." ci inner join ".TBL_COMPUTERS." c on ci.computer_id = c.id where ci.field_id = ".$ad_prt_driver_name_field." ";
			}
			$query.= " and ci.value like '".$filter['search']."%' "; 
		}

		$items = db::db_fetch_array($query);
		foreach ($items as $obj)
		{
			$cid = $obj->computer_id;
			$nrc = $obj->nrc;
			$printer = new AD_Printer($cid, $nrc);
			$printer->customer_id = $obj->customer_id;
			$ret[] = $printer;
		}
		return $ret;
	}
	
	
	/** [Class Method] Returns all AD printers which exist in ad_printers_extras (with an ID and asset number)
	* but for which there is no more matching in the computers_items table.
	* This normally happends when printers are removed from use or renamed.
	* @param	int			$customer_id	Array with the ID of the customer for which to fetch the data
	* @return	array					Array of generic objects with the following fields:
	*							id, canonical_name, customer_id, asset_number, profile_id, snmp_enabled,
	*							snmp_computer_id, snmp_ip, last_contact, customer_id (all from the ad_printers_extras table),
	*							sn, warranty_starts, warranty_ends, service_package_id, service_level_id,
	*							contract_number, hw_product_id, product number (all these last fields starting
	*							with 'sn' come from the ad_printers_warranties table), and
	*							a 'name' field which is derived from the canonical name without the domain 
	*							and path part.
	*/
	public static function get_orphan_ad_printers ($customer_id)
	{
		$ret = array ();
		
		if ($customer_id)
		{
			$q = 'SELECT e.*, w.sn, w.warranty_starts, w.warranty_ends, w.service_package_id, w.service_level_id, ';
			$q.= 'w.contract_number, w.hw_product_id, w.product_number FROM '.TBL_AD_PRINTERS_EXTRAS.' e ';
			$q.= 'LEFT OUTER JOIN '.TBL_AD_PRINTERS_WARRANTIES.' w ON e.canonical_name=w.canonical_name ';
			$q.= 'LEFT OUTER JOIN '.TBL_COMPUTERS_ITEMS.' ci ON ci.item_id='.ADPRINTERS_ITEM_ID.' AND ';
			$q.= 'ci.field_id='.FIELD_ID_AD_PRINTER_CANONICAL_NAME.' AND e.canonical_name=ci.value ';
			$q.= 'WHERE w.customer_id='.$customer_id.' AND ci.computer_id IS NULL ';
			$ret = db::db_fetch_array ($q);
			
			for ($i=0; $i<count($ret); $i++)
			{
				$ret[$i]->name = preg_replace ('/^.*(\/|\\\)/', '', $ret[$i]->canonical_name);
				$ret[$i]->asset_no = ASSET_PREFIX_AD_PRINTER . str_pad($ret[$i]->id, 5, '0', STR_PAD_LEFT);
			}
		}
		
		return $ret;
	}
	
	/** [Class Method] Deletes from ad_printers_extras and ad_printers_warranties all information about an orphan printer.
	* NOTE: Trying to delete an AD Printer which still exists in computers_items will fail, since it will be automatically
	* recreated anyway at the next reporting and next run of sync_extras()
	* @param	int			$id		The numeric ID of the AD Printer
	*/
	public static function delete_orphan_printer ($id)
	{
		$ret = false;
		if ($id)
		{
			// Fetch the canonical name
			$q = 'SELECT canonical_name FROM '.TBL_AD_PRINTERS_EXTRAS.' WHERE id='.$id;
			$canonical_name = db::db_fetch_field ($q, 'canonical_name');
			
			if ($canonical_name)
			{
				// Make sure it does not exist in computers_items
				$q = 'SELECT computer_id FROM '.TBL_COMPUTERS_ITEMS.' WHERE item_id='.ADPRINTERS_ITEM_ID.' AND ';
				$q.= 'field_id='.FIELD_ID_AD_PRINTER_CANONICAL_NAME.' AND value="'.db::db_escape($canonical_name).'"';
				if (!db::db_fetch_field ($q, 'computer_id'))
				{
					// It is safe to delete it
					db::db_query ('DELETE FROM '.TBL_AD_PRINTERS_WARRANTIES.' WHERE canonical_name="'.db::db_escape($canonical_name).'"');
					db::db_query ('DELETE FROM '.TBL_AD_PRINTERS_EXTRAS.' WHERE id='.$id);
					db::db_query ('DELETE FROM '.TBL_PERIPHERALS_ITEMS.' WHERE obj_class='.SNMP_OBJ_CLASS_AD_PRINTER.' AND obj_id='.$id);
					db::db_query ('DELETE FROM '.TBL_NOTIFICATIONS.' WHERE object_class='.NOTIF_OBJ_CLASS_AD_PRINTER.' AND object_id='.$id);
					$q = 'UPDATE '.TBL_DISCOVERIES.' SET matched_obj_class=0, matched_obj_id=0, matched_obj_name="" ';
					$q.= 'WHERE matched_obj_class='.SNMP_OBJ_CLASS_AD_PRINTER.' AND matched_obj_id='.$id;
					db::db_query ($q);
					$ret = true;
				}
			}
			else
			{
				// The canonical name is empty, so it might be a damaged record
				db::db_query ('DELETE FROM '.TBL_AD_PRINTERS_EXTRAS.' WHERE id='.$id);
				db::db_query ('DELETE FROM '.TBL_PERIPHERALS_ITEMS.' WHERE obj_class='.SNMP_OBJ_CLASS_AD_PRINTER.' AND obj_id='.$id);
				db::db_query ('DELETE FROM '.TBL_NOTIFICATIONS.' WHERE object_class='.NOTIF_OBJ_CLASS_AD_PRINTER.' AND object_id='.$id);
				$q = 'UPDATE '.TBL_DISCOVERIES.' SET matched_obj_class=0, matched_obj_id=0, matched_obj_name="" ';
				$q.= 'WHERE matched_obj_class='.SNMP_OBJ_CLASS_AD_PRINTER.' AND matched_obj_id='.$id;
				db::db_query ($q);
				$ret = true;
			}
		}
		
		return $ret;
	}
	
	
	/** [Class Method] Comparator function to be used for sorting array of AD_Printer objects by their asset numbers */
    public static function cmp_asset_no ($a, $b)
	{
		if ($a->asset_no < $b->asset_no) return -1;
		elseif ($a->asset_no == $b->asset_no) return 0;
		else return 1;
	}
	
	
	/**
	* [Class Method] Returns a list of AD printers, based on their canonical names
	* @param	array	$filter				Associative array with filtering criteria. Can contain:
	*							- customer_id: Returns only AD printers for this customer_id
	*							- computer_id: Return only AD printers that have been reported
	*							  by this computer ID (which means that the computer should be
	*							  an AD server).
	* @return	array					Associative array with the matched AD Printers, the keys being
	*							canonical names and the values being common names.
	*/
    public static function get_ad_printers_list_canonical ($filter = array())
	{
		$ret = array ();
		
		$item_id = ADPRINTERS_ITEM_ID;
		$canonical_name_field_id = FIELD_ID_AD_PRINTER_CANONICAL_NAME;
		$cn_field_id = FIELD_ID_AD_PRINTER_CN;
		
		$q = 'SELECT i1.value, i2.value FROM '.TBL_COMPUTERS_ITEMS.' i1 INNER JOIN '.TBL_COMPUTERS_ITEMS.' i2 ';
		$q.= 'ON i1.computer_id=i2.computer_id AND i1.item_id=i2.item_id and i1.nrc=i2.nrc ';
		
		if ($filter['customer_id']) $q.= 'INNER JOIN '.TBL_COMPUTERS.' c ON i1.computer_id=c.id ';
		
		$q.= 'WHERE i1.item_id='.$item_id.' AND i1.field_id='.$canonical_name_field_id.' AND i2.field_id='.$cn_field_id.' ';
		
		if ($filter['customer_id']) $q.= 'AND c.customer_id='.$filter['customer_id'].' ';
		if ($filter['computer_id']) $q.= 'AND i1.computer_id='.$filter['computer_id'].' ';
		
		$ret = db::db_fetch_list ($q);
		asort($ret);
		
		return $ret;
	}

	
	/**
	* [Class Method] Makes sure that all reported AD printers are created in the AD warranties table and
	* the AD extras table.
	* Note that, in order to uniquely identify the printers, the 'Canonical name' attribute is used.
	*/
	public static function sync_extras ()
	{
		// Check warranties table
		$q = 'SELECT i.value, c.customer_id FROM '.TBL_COMPUTERS_ITEMS.' i ';
		$q.= 'LEFT OUTER JOIN '.TBL_AD_PRINTERS_WARRANTIES.' w ON i.value=w.canonical_name ';
		$q.= 'INNER JOIN '.TBL_COMPUTERS.' c ON i.computer_id=c.id ';
		$q.= 'WHERE item_id='.ADPRINTERS_ITEM_ID.' AND ';
		$q.= 'field_id='.FIELD_ID_AD_PRINTER_CANONICAL_NAME.' AND w.canonical_name IS NULL ';
		$names = db::db_fetch_list ($q);
		
		if (count($names) > 0)
		{
			// New canonical names found, add them to the warranties table
			$q = 'INSERT INTO '.TBL_AD_PRINTERS_WARRANTIES.' (canonical_name, customer_id) VALUES ';
			foreach ($names as $name => $customer_id)
			{
				$q.= '("'.db::db_escape ($name).'", '.$customer_id.'), ';
			}
			$q = preg_replace ('/,\s*$/', '', $q);
			db::db_query ($q);
		}
		
		// Check extra infos table
		$q = 'SELECT i.value, c.customer_id FROM '.TBL_COMPUTERS_ITEMS.' i ';
		$q.= 'LEFT OUTER JOIN '.TBL_AD_PRINTERS_EXTRAS.' w ON i.value=w.canonical_name ';
		$q.= 'INNER JOIN '.TBL_COMPUTERS.' c ON i.computer_id=c.id ';
		$q.= 'WHERE item_id='.ADPRINTERS_ITEM_ID.' AND ';
		$q.= 'field_id='.FIELD_ID_AD_PRINTER_CANONICAL_NAME.' AND w.canonical_name IS NULL ';
		$names = db::db_fetch_list ($q);
		
		if (count($names) > 0)
		{
			foreach ($names as $name => $customer_id)
			{
				// Invoking get_asset_no_ad_printer() will take care of adding the AD printer 
				// information to the ad_printers_extras table and assigning it a numeric ID
				get_asset_no_ad_printer ($name, $customer_id);
			}
		}
	}
	
	
	/** 
	* [Class Method] Returns the warranty information for an AD printer, identified by its canonical name
	* @param	string	$canonical_name			The canonical name of the AD printer
	* @return	object					Generic object with the following fields: canonical_name, customer_id, sn,
	*							warranty_starts, warranty_ends
	*/
    public static function get_warranty_by_canonical_name ($canonical_name = '')
	{
		$ret = null;
		
		if ($canonical_name)
		{
			$q = 'SELECT * FROM '.TBL_AD_PRINTERS_WARRANTIES.' WHERE ';
			$q.= 'canonical_name="'.db::db_escape($canonical_name).'" ';
			$ret = db::db_fetch_array ($q);
			$ret = $ret[0];
		}
		
		return $ret;
	}

    public static function get_serials_numbers($serial)
	{
		$data = array();
		$query = " (SELECT value from ".TBL_COMPUTERS_ITEMS." where item_id=".ADPRINTERS_ITEM_ID." and field_id=".FIELD_ID_AD_PRINTER_CANONICAL_NAME.") ";
		$query = "SELECT cust.name, cust.id, apw.sn, apw.canonical_name  from ".TBL_AD_PRINTERS_WARRANTIES." apw inner join ".TBL_CUSTOMERS." cust on cust.id=apw.customer_id where apw.canonical_name in ".$query;
		$query.=" and apw.sn like '".$serial."%' order by apw.canonical_name desc";
		$data = db::db_fetch_array($query);
		
		$cnames = array();
		foreach($data as $dt)
		{
			$cnames[] = $dt->canonical_name;
		}
		$qr = " (";
		for($i=0; $i<sizeof($cnames); $i++)
		{
			$qr .= "'".db::db_escape($cnames[$i])."'"; 
			if($i!=sizeof($cnames)-1) $qr.=", ";
		}
		$qr.=") ";
		if(sizeof($cnames) != 0)
		{
			$qq = "select distinct computer_id, nrc, value from ".TBL_COMPUTERS_ITEMS." ci ";
			$qq.= " where (item_id=".ADPRINTERS_ITEM_ID." and field_id=".FIELD_ID_AD_PRINTER_CN.") and (computer_id, nrc) in (select computer_id, nrc from ".TBL_COMPUTERS_ITEMS." where field_id=".FIELD_ID_AD_PRINTER_CANONICAL_NAME." and value in ".$qr." order by canonical_name desc)";
			
			
			$odata = db::db_fetch_array($qq);
			$i=0;
			for($i=0; $i<sizeof($data); $i++)
			{
				$data[$i]->cid = $odata[$i]->computer_id;
				$data[$i]->nrc = $odata[$i]->nrc;
				$data[$i]->cn = $odata[$i]->value;
			}
		}
		return $data;
	}
	/** 
	* [Class Method] Returns the AD printers warranties for a given customer 
	* Note that, in order to uniquely identify the printers, the 'Canonical name' attribute is used.
	* @param	array	$filter				Associative array with filtering criteria. Can contain:
	*							- customer_id: (Required) The ID of the customer for which to return the warranties
	*							- order_by: 'asset_no' to order the results by asset number. By default results
	*							  are sorted by name.
	* @return	array					Array of Warranty objects
	*/
    public static function get_warranties ($filter = array ())
	{
		class_load ('Warranty');
		$ret = array ();
		
		if ($filter['customer_id'])
		{
			$q = 'SELECT DISTINCT ci.computer_id, ci.nrc FROM '.TBL_COMPUTERS_ITEMS.' ci INNER JOIN '.TBL_COMPUTERS.' c ON ci.computer_id=c.id ';
			$q.= 'WHERE ci.item_id='.ADPRINTERS_ITEM_ID.' AND c.customer_id='.$filter['customer_id'].' AND ci.field_id='.FIELD_ID_AD_PRINTER_CN.' ORDER by ci.value ';
			
			//debug($q);
			$data = db::db_fetch_array ($q);
			foreach ($data as $d) $ret[] = new Warranty (WAR_OBJ_AD_PRINTER, $d->computer_id, $d->nrc);
			
			if ($filter['order_by'] == 'asset_no') usort ($ret, array('AD_Printer', 'cmp_asset_no')); 
		}
		
		return $ret;
	}
	
	
	/**
	* [Class Method] Returns an array with the correspondence between canonical names and IDs.
	* @param	array			$filter		Associative array with filtering criteria, same as for get_ad_printers
	* @return	array					Assiciative array with the keys being canonical names and the values being
	*							generic objects with the fields "computer_id" and "nrc"
	*/
    public static function get_cn_ids ($filter = array ())
	{
		$ret = array ();
		
		$ad_printers = AD_Printer::get_ad_printers ($filter);
		
		for ($i=0; $i<count($ad_printers); $i++)
		{
			$ret[$ad_printers[$i]->canonical_name]->computer_id = $ad_printers[$i]->computer_id;
			$ret[$ad_printers[$i]->canonical_name]->nrc = $ad_printers[$i]->nrc;
		}
		
		return $ret;
	}
}

?>